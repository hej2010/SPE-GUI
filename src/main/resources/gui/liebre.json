{
  "name": "Liebre",
  "operators": {
    "sources": [
      "BaseSource",
      "TextFileSource"
    ],
    "sinks": [
      "BaseSink",
      "TextFileSink"
    ],
    "regular": [
      "BaseOperator1In",
      "BaseOperator2In",
      "Map",
      "FlatMap",
      "Filter",
      "Router",
      "Aggregate",
      "Join"
    ]
  },
  "links": {
    "addMapOperator": "op:Map",
    "addFilterOperator": "op:Filter",
    "addOperator": "op:BaseOperator1In",
    "addOperator2n": "op:BaseOperator2In",
    "addRouterOperator": "op:Router",
    "addTextFileSource": "source:TextFileSource",
    "addBaseSink": "sink:BaseSink"
  },
  "imports": {
    "base": [
      "query.Query",
      "component.operator.Operator"
    ],
    "BaseOperator1In": [
      "component.operator.in1.BaseOperator1In"
    ],
    "BaseOperator2In": [
      "component.operator.in2.BaseOperator2In"
    ],
    "Map": [
      "component.operator.in1.map.MapFunction"
    ],
    "FlatMap": [
      "component.operator.in1.map.FlatMapFunction"
    ],
    "Filter": [
      "component.operator.in1.filter.FilterFunction"
    ],
    "Router": [
      "component.operator.router.RouterOperator"
    ],
    "BaseSource": [
      "component.source.Source"
    ],
    "TextFileSource": [
      "component.source.Source"
    ],
    "BaseSink": [
      "component.sink.Sink"
    ],
    "TextFileSink": [
      "component.sink.Sink"
    ]
  },
  "definition": {
    "base": [
      "Query q = new Query();"
    ],
    "BaseOperator1In": {
      "before": "Operator<@IN1, @OUT1> @ID = new BaseOperator1In<@IN1, @OUT1>(\"@ID\") {\n@Override\npublic List<@OUT1> processTupleIn1(@IN1 tuple) {",
      "middle": "return null;",
      "after": "}\n};",
      "placeholders": {
        "input": [
          "@IN1"
        ],
        "output": [
          "@OUT1"
        ],
        "identifier": "@ID"
      }
    },
    "BaseOperator2In": {
      "before": "BaseOperator2In<@IN1, @IN2, @OUT1> @ID = new BaseOperator2In<@IN1, @IN2, @OUT1>(\"@ID\") {",
      "middle": "@Override\npublic List<@OUT1> processTupleIn1(@IN1 tuple) {\nreturn null;\n}\n\n@Override\npublic List<@OUT1> processTupleIn2(@IN2 tuple) {\nreturn null;\n}",
      "after": "});",
      "placeholders": {
        "input": [
          "@IN1",
          "@IN2"
        ],
        "output": [
          "@OUT1"
        ],
        "identifier": "@ID"
      }
    },
    "Map": {
      "before": "Operator<@IN1, @OUT1> @ID = q.addMapOperator(\"@ID\", (MapFunction<@IN1, @OUT1>) tuple -> {",
      "middle": "return null;",
      "after": "});",
      "placeholders": {
        "input": [
          "@IN1"
        ],
        "output": [
          "@OUT1"
        ],
        "identifier": "@ID"
      }
    },
    "FlatMap": {
      "before": "Operator<@IN1, @OUT1> @ID = q.addFlatMapOperator(\"@ID\", (FlatMapFunction<@IN1, @OUT1>) tuple -> {",
      "middle": "List<@OUT1> list = new LinkedList<>();\nreturn list;",
      "after": "});",
      "placeholders": {
        "input": [
          "@IN1"
        ],
        "output": [
          "@OUT1"
        ],
        "identifier": "@ID"
      }
    },
    "Filter": {
      "before": "Operator<@IN1, @IN1> @ID = q.addFilterOperator(\"@ID\", tuple -> {",
      "middle": "return false;",
      "after": "});",
      "placeholders": {
        "input": [
          "@IN1"
        ],
        "output": [
        ],
        "identifier": "@ID"
      }
    },
    "Router": {
      "before": "Operator<@IN1, @IN1> @ID = q.addRouterOperator(\"@ID\");",
      "middle": "",
      "after": "",
      "placeholders": {
        "input": [
          "@IN1"
        ],
        "output": [
        ],
        "identifier": "@ID"
      }
    },
    "BaseSink": {
      "before": "Sink<@OUT1> @ID = q.addBaseSink(\"@ID\", tuple -> {",
      "middle": "//",
      "after": "});",
      "placeholders": {
        "input": [
        ],
        "output": [
          "@OUT1"
        ],
        "identifier": "@ID"
      }
    },
    "TextFileSink": {
      "before": "Sink<@OUT1> @ID = q.addTextFileSink(\"@ID\",",
      "middle": "\"file.txt\" // path\n\"true // autoFlush\"",
      "after": ");",
      "placeholders": {
        "input": [
        ],
        "output": [
          "@OUT1"
        ],
        "identifier": "@ID"
      }
    },
    "BaseSource": {
      "before": "Source<@OUT1> @ID = q.addBaseSource(\"@ID\", () -> {",
      "middle": "return null;",
      "after": "});",
      "placeholders": {
        "input": [
        ],
        "output": [
          "@OUT1"
        ],
        "identifier": "@ID"
      }
    },
    "TextFileSource": {
      "before": "Source<String> @ID = q.addTextFileSource(\"@ID\",",
      "middle": "\"file.txt\" // path",
      "after": ");",
      "placeholders": {
        "input": [
        ],
        "output": [
        ],
        "identifier": "@ID"
      }
    }
  }
}